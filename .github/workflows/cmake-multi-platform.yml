name: Build and Test

on:
  push:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest ,windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - uses: lukka/get-cmake@latest
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    - name: Set up compilers
      run: |
        if [[ "$MATRIX_OS" == "ubuntu-latest" ]]; then
          export CC="${{ matrix.c_compiler }}"
          export CXX="${{ matrix.cpp_compiler }}"
        fi
      shell: bash
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Install pkg on ubuntu
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          sudo apt-get update
          sudo apt-get install -y pkg-config
        fi
      shell: bash
    - name: Set up Conan
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          pip install conan && sudo pip install conan
        elif [ "$RUNNER_OS" == "Windows" ]; then
            pip install conan
        else
            pip install conan
        fi
      shell: bash
    - name: Cache Conan directory
      uses: actions/cache@v2
      with:
        path: |
          ~/.conan
        key: conan-${{ runner.os }}-${{ hashFiles('**/conanfile.txt') }}
        restore-keys: |
          conan-${{ runner.os }}-
    - name:  Install conan packages
      run:   |
          if [ "$RUNNER_OS" == "Linux" ]; then
            conan profile detect --force && sudo conan profile detect --force
          elif [ "$RUNNER_OS" == "Windows" ]; then
              conan profile detect --force
          else
            conan profile detect --force
          fi
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo conan install . --output-folder=build --build=missing -c tools.system.package_manager:mode=install && sudo rm CMakeUserPresets.json && sudo rm -rf build/
          elif [ "$RUNNER_OS" == "Windows" ]; then
              conan install . --output-folder=build --build=missing -c tools.system.package_manager:mode=install
          else
            sudo conan install . --output-folder=build --build=missing -c tools.system.package_manager:mode=install && sudo rm CMakeUserPresets.json && sudo rm -rf build/
          fi
      shell: bash
    - name: Compile R_Type
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          cd build && cmake .. && cmake --build . --config Release
        else
          cd build && cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release && cmake --build . --config Release
        fi
      shell: bash
    - name: Store build artifacts (windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v2
      with:
        name: R_Type Windows
        path: Release/*.exe
    - name: Store build artifacts (linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v2
      with:
        name: R_Type Linux
        path: |
          r-type_client
          r-type_server
    - name: Store build artifacts (macos)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v2
      with:
        name: R_Type Macos
        path: |
          r-type_client
          r-type_server