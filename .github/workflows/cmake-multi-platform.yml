name: Build and Test

on:
  push:
    branches:
      - main
      - GameEnginee
      - client
      - network

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - uses: lukka/get-cmake@latest
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    - name: Set up compilers
      run: |
        if [[ "$MATRIX_OS" == "ubuntu-latest" ]]; then
          export CC="${{ matrix.c_compiler }}"
          export CXX="${{ matrix.cpp_compiler }}"
        fi
      shell: bash
    - name: Install pkg on ubuntu
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          sudo apt-get update
          sudo apt-get install -y pkg-config
        fi
      shell: bash
    - name: Set up Conan
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          pip install conan && sudo pip install conan
        elif [ "$RUNNER_OS" == "Windows" ]; then
            pip install conan
        else
            echo "$RUNNER_OS not supported"
            exit 1
        fi
        if [ "$RUNNER_OS" == "Linux" ]; then
          conan profile detect --force && sudo conan profile detect --force
        elif [ "$RUNNER_OS" == "Windows" ]; then
            conan profile detect --force
        else
            echo "$RUNNER_OS not supported"
            exit 1
        fi
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo conan install . --output-folder=build --build=missing -c tools.system.package_manager:mode=install && sudo rm CMakeUserPresets.json && sudo rm -rf build/
        elif [ "$RUNNER_OS" == "Windows" ]; then
            conan install . --output-folder=build --build=missing -c tools.system.package_manager:mode=install
        else
            echo "$RUNNER_OS not supported"
            exit 1
        fi
      shell: bash
    - name:  Install conan packages
      run:   |
          conan install . --output-folder=build --build=missing -c tools.system.package_manager:mode=install
      shell: bash
    - name: Test compilation with conan & cmake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release ..
        cmake --build .
